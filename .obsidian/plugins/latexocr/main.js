/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Latexocr
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { spawn } = require("child_process");
var DEFAULT_SETTINGS = {
  statusBarVisible: true
};
var Latexocr = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.statusBarTextElement = this.addStatusBarItem();
    this.statusBarTextElement.setText("latexocr not running");
    this.isLatexocrRunning = false;
    this.addCommand({
      id: "run_latexocr",
      name: "Run latexocr",
      callback: () => {
        this.run_latexocr();
      }
    });
    this.addRibbonIcon("braces", "latexocr", () => {
      this.run_latexocr();
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async run_latexocr() {
    const latexocr_process = spawn("latexocr");
    new import_obsidian.Notice("latexocr running");
    this.isLatexocrRunning = true;
    this.setStatusBarText();
    latexocr_process.on("close", () => {
      new import_obsidian.Notice(`latexocr closed`);
      this.isLatexocrRunning = false;
      this.setStatusBarText();
    });
  }
  async setStatusBarText() {
    let statusBarText = "";
    if (this.settings.statusBarVisible) {
      if (this.isLatexocrRunning) {
        statusBarText = "latexocr running";
      } else {
        statusBarText = "latexocr not running";
      }
      this.statusBarTextElement.setText(statusBarText);
    } else {
      this.statusBarTextElement.setText("");
    }
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show status in status bar").setDesc("Controls whether latexocr running status is shown in the Obsidian status bar").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.statusBarVisible).onChange(async (value) => {
        this.plugin.settings.statusBarVisible = value;
        this.plugin.setStatusBarText();
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAncGF0aCc7XHJcbmNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xyXG5cclxuaW50ZXJmYWNlIExhdGV4b2NyU2V0dGluZ3Mge1xyXG4gICAgc3RhdHVzQmFyVmlzaWJsZTogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTGF0ZXhvY3JTZXR0aW5ncyA9IHtcclxuICAgIHN0YXR1c0JhclZpc2libGU6IHRydWVcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhdGV4b2NyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBMYXRleG9jclNldHRpbmdzO1xyXG4gICAgaXNMYXRleG9jclJ1bm5pbmc6IGJvb2xlYW47XHJcbiAgICBzdGF0dXNCYXJUZXh0RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIC8vIGFkZCBzdGF0dXMgYmFyIHRleHRcclxuICAgICAgICB0aGlzLnN0YXR1c0JhclRleHRFbGVtZW50ID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXNCYXJUZXh0RWxlbWVudC5zZXRUZXh0KCdsYXRleG9jciBub3QgcnVubmluZycpO1xyXG4gICAgICAgIHRoaXMuaXNMYXRleG9jclJ1bm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGNvbW1hbmRcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ3J1bl9sYXRleG9jcicsXHJcbiAgICAgICAgICAgIG5hbWU6ICdSdW4gbGF0ZXhvY3InLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5fbGF0ZXhvY3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgYnV0dG9uIGluIGxlZnQgcmliYm9uXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdicmFjZXMnLCAnbGF0ZXhvY3InLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucnVuX2xhdGV4b2NyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJ1bl9sYXRleG9jcigpIHtcclxuICAgICAgICAvLyBSdW5zIGxhdGV4b2NyXHJcbiAgICAgICAgLy8gVXBkYXRlcyBzdGF0dXMgYmFyIHRleHQgYW5kIHNlbmRzIG5vdGljZXMgZm9yIG9wZW5lbmluZyBhbmQgY2xvc2luZ1xyXG4gICAgICAgIGNvbnN0IGxhdGV4b2NyX3Byb2Nlc3MgPSBzcGF3bihcImxhdGV4b2NyXCIpO1xyXG5cclxuICAgICAgICBuZXcgTm90aWNlKFwibGF0ZXhvY3IgcnVubmluZ1wiKTtcclxuICAgICAgICB0aGlzLmlzTGF0ZXhvY3JSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldFN0YXR1c0JhclRleHQoKTtcclxuXHJcbiAgICAgICAgbGF0ZXhvY3JfcHJvY2Vzcy5vbihcImNsb3NlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgbGF0ZXhvY3IgY2xvc2VkYCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNMYXRleG9jclJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXNCYXJUZXh0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0U3RhdHVzQmFyVGV4dCgpIHtcclxuXHJcbiAgICAgICAgLy8gSWYgd2UgYXJlIHNob3dpbmcgc3RhdHVzIGJhciB0ZXh0LCB1cGRhdGUgaXQgYXMgYXBwcm9wcmlhdGVcclxuICAgICAgICBsZXQgc3RhdHVzQmFyVGV4dCA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0YXR1c0JhclZpc2libGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXRleG9jclJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1c0JhclRleHQgPSAnbGF0ZXhvY3IgcnVubmluZyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXNCYXJUZXh0ID0gJ2xhdGV4b2NyIG5vdCBydW5uaW5nJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c0JhclRleHRFbGVtZW50LnNldFRleHQoc3RhdHVzQmFyVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c0JhclRleHRFbGVtZW50LnNldFRleHQoJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IExhdGV4b2NyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IExhdGV4b2NyKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IHN0YXR1cyBpbiBzdGF0dXMgYmFyJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0NvbnRyb2xzIHdoZXRoZXIgbGF0ZXhvY3IgcnVubmluZyBzdGF0dXMgaXMgc2hvd24gaW4gdGhlIE9ic2lkaWFuIHN0YXR1cyBiYXInKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RhdHVzQmFyVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0YXR1c0JhclZpc2libGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0U3RhdHVzQmFyVGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0Q7QUFFL0QsSUFBTSxFQUFFLE1BQU0sSUFBSSxRQUFRLGVBQWU7QUFNekMsSUFBTSxtQkFBcUM7QUFBQSxFQUN2QyxrQkFBa0I7QUFDdEI7QUFFQSxJQUFxQixXQUFyQixjQUFzQyx1QkFBTztBQUFBLEVBS3pDLE1BQU0sU0FBUztBQUNYLFVBQU0sS0FBSyxhQUFhO0FBR3hCLFNBQUssdUJBQXVCLEtBQUssaUJBQWlCO0FBQ2xELFNBQUsscUJBQXFCLFFBQVEsc0JBQXNCO0FBQ3hELFNBQUssb0JBQW9CO0FBR3pCLFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ1osYUFBSyxhQUFhO0FBQUEsTUFDdEI7QUFBQSxJQUNKLENBQUM7QUFHRCxTQUFLLGNBQWMsVUFBVSxZQUFZLE1BQU07QUFDM0MsV0FBSyxhQUFhO0FBQUEsSUFDdEIsQ0FBQztBQUdELFNBQUssY0FBYyxJQUFJLFlBQVksS0FBSyxLQUFLLElBQUksQ0FBQztBQUFBLEVBRXREO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDN0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNyQztBQUFBLEVBRUEsTUFBTSxlQUFlO0FBR2pCLFVBQU0sbUJBQW1CLE1BQU0sVUFBVTtBQUV6QyxRQUFJLHVCQUFPLGtCQUFrQjtBQUM3QixTQUFLLG9CQUFvQjtBQUN6QixTQUFLLGlCQUFpQjtBQUV0QixxQkFBaUIsR0FBRyxTQUFTLE1BQU07QUFDL0IsVUFBSSx1QkFBTyxpQkFBaUI7QUFDNUIsV0FBSyxvQkFBb0I7QUFDekIsV0FBSyxpQkFBaUI7QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsTUFBTSxtQkFBbUI7QUFHckIsUUFBSSxnQkFBZ0I7QUFDcEIsUUFBSSxLQUFLLFNBQVMsa0JBQWtCO0FBQ2hDLFVBQUksS0FBSyxtQkFBbUI7QUFDeEIsd0JBQWdCO0FBQUEsTUFDcEIsT0FDSztBQUNELHdCQUFnQjtBQUFBLE1BQ3BCO0FBQ0EsV0FBSyxxQkFBcUIsUUFBUSxhQUFhO0FBQUEsSUFDbkQsT0FDSztBQUNELFdBQUsscUJBQXFCLFFBQVEsRUFBRTtBQUFBLElBQ3hDO0FBQUEsRUFFSjtBQUNKO0FBRUEsSUFBTSxjQUFOLGNBQTBCLGlDQUFpQjtBQUFBLEVBR3ZDLFlBQVksS0FBVSxRQUFrQjtBQUNwQyxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNsQjtBQUFBLEVBRUEsVUFBZ0I7QUFDWixVQUFNLEVBQUUsWUFBWSxJQUFJO0FBRXhCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsMkJBQTJCLEVBQ25DLFFBQVEsOEVBQThFLEVBQ3RGO0FBQUEsTUFBVSxDQUFDLFdBQ1IsT0FDSyxTQUFTLEtBQUssT0FBTyxTQUFTLGdCQUFnQixFQUM5QyxTQUFTLE9BQU8sVUFBVTtBQUN2QixhQUFLLE9BQU8sU0FBUyxtQkFBbUI7QUFDeEMsYUFBSyxPQUFPLGlCQUFpQjtBQUM3QixjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDbkMsQ0FBQztBQUFBLElBQ1Q7QUFBQSxFQUNSO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
